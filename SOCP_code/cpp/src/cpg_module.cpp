
/*
Auto-generated by CVXPYgen on September 25, 2025 at 21:59:06.
Content: Python binding with pybind11.
*/

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <ctime>
#include <chrono>
#include "cpg_module.hpp"

extern "C" {
    #include "include/cpg_workspace.h"
    #include "include/cpg_solve.h"
}

namespace py = pybind11;

static int i;

CPG_Result_cpp_t solve_cpp(struct CPG_Updated_cpp_t& CPG_Updated_cpp, struct CPG_Params_cpp_t& CPG_Params_cpp){

    // Pass changed user-defined parameter values to the solver
    if (CPG_Updated_cpp.b_2) {
        cpg_update_b_2(CPG_Params_cpp.b_2);
    }
    if (CPG_Updated_cpp.c_31) {
        cpg_update_c_31(CPG_Params_cpp.c_31);
    }
    if (CPG_Updated_cpp.d_3) {
        cpg_update_d_3(CPG_Params_cpp.d_3);
    }
    if (CPG_Updated_cpp.A_31) {
        for(i=0; i<4; i++) {
            cpg_update_A_31(i, CPG_Params_cpp.A_31[i]);
        }
    }
    if (CPG_Updated_cpp.b_3) {
        for(i=0; i<4; i++) {
            cpg_update_b_3(i, CPG_Params_cpp.b_3[i]);
        }
    }
    if (CPG_Updated_cpp.c_41) {
        cpg_update_c_41(CPG_Params_cpp.c_41);
    }
    if (CPG_Updated_cpp.d_4) {
        cpg_update_d_4(CPG_Params_cpp.d_4);
    }
    if (CPG_Updated_cpp.A_41) {
        for(i=0; i<4; i++) {
            cpg_update_A_41(i, CPG_Params_cpp.A_41[i]);
        }
    }
    if (CPG_Updated_cpp.b_4) {
        for(i=0; i<4; i++) {
            cpg_update_b_4(i, CPG_Params_cpp.b_4[i]);
        }
    }

    // Solve
    auto ASA_start = std::chrono::high_resolution_clock::now();
    cpg_solve();
    auto ASA_end = std::chrono::high_resolution_clock::now();

    // Arrange and return results
    CPG_Prim_cpp_t CPG_Prim_cpp {};
    for(i=0; i<4; i++) {
        CPG_Prim_cpp.x[i] = CPG_Prim.x[i];
    }
    CPG_Dual_cpp_t CPG_Dual_cpp {};
    for(i=0; i<5; i++) {
        CPG_Dual_cpp.d0[i] = CPG_Dual.d0[i];
    }
    for(i=0; i<2; i++) {
        CPG_Dual_cpp.d1[i] = CPG_Dual.d1[i];
    }
    for(i=0; i<5; i++) {
        CPG_Dual_cpp.d2[i] = CPG_Dual.d2[i];
    }
    for(i=0; i<5; i++) {
        CPG_Dual_cpp.d3[i] = CPG_Dual.d3[i];
    }
    CPG_Dual_cpp.d4 = CPG_Dual.d4;
    CPG_Dual_cpp.d5 = CPG_Dual.d5;
    CPG_Info_cpp_t CPG_Info_cpp {};
    CPG_Info_cpp.obj_val = CPG_Info.obj_val;
    CPG_Info_cpp.iter = CPG_Info.iter;
    CPG_Info_cpp.status = CPG_Info.status;
    CPG_Info_cpp.pri_res = CPG_Info.pri_res;
    CPG_Info_cpp.dua_res = CPG_Info.dua_res;
    std::chrono::duration<double> elapsed = ASA_end - ASA_start;
    CPG_Info_cpp.time = elapsed.count();
    CPG_Result_cpp_t CPG_Result_cpp {};
    CPG_Result_cpp.prim = CPG_Prim_cpp;
    CPG_Result_cpp.dual = CPG_Dual_cpp;
    CPG_Result_cpp.info = CPG_Info_cpp;
    return CPG_Result_cpp;

}

PYBIND11_MODULE(cpg_module, m) {

    py::class_<CPG_Params_cpp_t>(m, "cpg_params")
            .def(py::init<>())
            .def_readwrite("b_2", &CPG_Params_cpp_t::b_2)
            .def_readwrite("c_31", &CPG_Params_cpp_t::c_31)
            .def_readwrite("d_3", &CPG_Params_cpp_t::d_3)
            .def_readwrite("A_31", &CPG_Params_cpp_t::A_31)
            .def_readwrite("b_3", &CPG_Params_cpp_t::b_3)
            .def_readwrite("c_41", &CPG_Params_cpp_t::c_41)
            .def_readwrite("d_4", &CPG_Params_cpp_t::d_4)
            .def_readwrite("A_41", &CPG_Params_cpp_t::A_41)
            .def_readwrite("b_4", &CPG_Params_cpp_t::b_4)
            ;

    py::class_<CPG_Updated_cpp_t>(m, "cpg_updated")
            .def(py::init<>())
            .def_readwrite("b_2", &CPG_Updated_cpp_t::b_2)
            .def_readwrite("c_31", &CPG_Updated_cpp_t::c_31)
            .def_readwrite("d_3", &CPG_Updated_cpp_t::d_3)
            .def_readwrite("A_31", &CPG_Updated_cpp_t::A_31)
            .def_readwrite("b_3", &CPG_Updated_cpp_t::b_3)
            .def_readwrite("c_41", &CPG_Updated_cpp_t::c_41)
            .def_readwrite("d_4", &CPG_Updated_cpp_t::d_4)
            .def_readwrite("A_41", &CPG_Updated_cpp_t::A_41)
            .def_readwrite("b_4", &CPG_Updated_cpp_t::b_4)
            ;

    py::class_<CPG_Prim_cpp_t>(m, "cpg_prim")
            .def(py::init<>())
            .def_readwrite("x", &CPG_Prim_cpp_t::x)
            ;

    py::class_<CPG_Dual_cpp_t>(m, "cpg_dual")
            .def(py::init<>())
            .def_readwrite("d0", &CPG_Dual_cpp_t::d0)
            .def_readwrite("d1", &CPG_Dual_cpp_t::d1)
            .def_readwrite("d2", &CPG_Dual_cpp_t::d2)
            .def_readwrite("d3", &CPG_Dual_cpp_t::d3)
            .def_readwrite("d4", &CPG_Dual_cpp_t::d4)
            .def_readwrite("d5", &CPG_Dual_cpp_t::d5)
            ;

    py::class_<CPG_Info_cpp_t>(m, "cpg_info")
            .def(py::init<>())
            .def_readwrite("obj_val", &CPG_Info_cpp_t::obj_val)
            .def_readwrite("iter", &CPG_Info_cpp_t::iter)
            .def_readwrite("status", &CPG_Info_cpp_t::status)
            .def_readwrite("pri_res", &CPG_Info_cpp_t::pri_res)
            .def_readwrite("dua_res", &CPG_Info_cpp_t::dua_res)
            .def_readwrite("time", &CPG_Info_cpp_t::time)
            ;

    py::class_<CPG_Result_cpp_t>(m, "cpg_result")
            .def(py::init<>())
            .def_readwrite("cpg_prim", &CPG_Result_cpp_t::prim)
            .def_readwrite("cpg_dual", &CPG_Result_cpp_t::dual)
            .def_readwrite("cpg_info", &CPG_Result_cpp_t::info)
            ;

    m.def("solve", &solve_cpp);

    m.def("set_solver_default_settings", &cpg_set_solver_default_settings);
    m.def("set_solver_feastol", &cpg_set_solver_feastol);
    m.def("set_solver_abstol", &cpg_set_solver_abstol);
    m.def("set_solver_reltol", &cpg_set_solver_reltol);
    m.def("set_solver_feastol_inacc", &cpg_set_solver_feastol_inacc);
    m.def("set_solver_abstol_inacc", &cpg_set_solver_abstol_inacc);
    m.def("set_solver_reltol_inacc", &cpg_set_solver_reltol_inacc);
    m.def("set_solver_maxit", &cpg_set_solver_maxit);

}
